1. Restful Api
    1.1 restful api是用于在前端与后台进行通信的一套规范。使用这个规范可以让前后端开发变得更加轻松。以下将讨论这套规范的一些设计细节。
    1.2 采用http或者https协议。
    1.3 数据之间传输的格式应该都使用json，而不使用xml。
    1.4 url连接中，不能有动词，只能有名词。并且对于一些名词，如果出现复数，那么应该在后面加s。
2. HTTP请求的方法
    2.1 GET：从服务器上获取资源。
    2.2 POST：在服务器上新创建一个资源。
    2.3 PUT：在服务器上更新资源。（客户端提供所有改变后的数据）
    2.4 PATCH：在服务器上更新资源。（客户端只提供需要改变的属性）
    2.5 DELETE：从服务器上删除资源。
3. 状态码
    3.1 200：OK，服务器成功响应客户端的请求。
    3.2 400：INVALID REQUEST用户发出的请求有错误，服务器没有进行新建或修改数据的操作。
    3.3 401：Unauthorized，用户没有权限访问这个请求
    3.4 403：Forbidden，因为某些原因禁止访问这个请求。
    3.5 404：NOT FOUND，用户发送的请求的url不存在
    3.6 406：NOT Acceptable，用户请求不被服务器接收（比如服务器期望客户端发送某个字段，但是没有发送）。
    3.7 500：Internal server error，服务器内部错误，比如出现了bug。
4. 安装
    4.1 Flask-Restful需要在Flask 0.8以上的版本，在Python2.6或者Python3.3上运行。通过pip install flask-restful即可安装。I
5. 定义Restful的视图
    5.1 如果使用Flask-Restful，那么定义视图函数的时候，就要继承自f1ask_restful.Resource类，然后再根据当前请求的method来定义相应的方法。比如期望客户端是使用get方法发送过来的请求，那么就定义一个get方法。类似于Methodview。
        5.1.1 从flask_restful中导入Api，来创建一个api对象。
        5.1.2 写一个视图函数，让他继承自‘Resource，然后在这个里面，使用你想要的请求方式来定义相应的方法，比如你想要将这个视图只能采用post’请求，那么就定义一个post方法。
        5.1.3 使用api.add_resource来添加视图与url。
    5.2 endpoint是用来给ur1_for反转ur1的时候指定的。如果不写endpoint，那么将会使用视图的名字的小写来作为endpoint。
    5.3 add-resource的第二个参数是访问这个视图函数的url，这个url可以跟之前的route一样，可以传递参数。并且还有一点不同的是，这个方法可以传递多个url来指定这个视图函数。
6. 参数解析
    6.1