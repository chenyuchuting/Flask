1. 过滤器
    1.1 过滤器（filter）是一些可以用来修改和过滤变量值的特殊函数，过滤器和变量用一个竖线隔开。它本质上就是一个函数，过滤器是将HTML模板中变量的值作为第一个参数传给过滤器，然后过滤器的返回值。
    1.2 如果过滤器需要参数也可以向Python函数一样使用括号传递。你可以把过滤器理解为函数，把当前的变量传入到过滤器中，然后根据过滤器的功能再返回相应的值，之后再将结果渲染到页面中。
基本的用法：{{ variable|过滤器名字 }}，使用管道符号|进行组合。
2. 过滤器的分类
    2.1 default("默认值")。使用方式为{{ value|default("默认值", boolean=True) }}，如果value的值不存在，那么就会使用default中的默认值，如果value值存在，但是是空字符串、空列表等，那么就必须要传递另外的一个参数Boolean=True。{{ value|default("默认值", boolean=True) }}也可以使用or来代替，使用{{ signature or "此人未有签名2" }}。
    2.2 safe()：将变量值标记为安全，避免转义。
    2.3 escape()：对某个字符串进行转义。在HTML文件中，使用{% autoescape off %}可以将它里面的代码块关闭或自动转义。下方为其它的过滤器
        first()：返回序列的第一个元素。
        last()：返回序列的最后一个元素。
        length()：返回变量的长度。
        random()：以下就自己百度吧。
        trim()：
        max()：
        min()：
        unique()：
        striptags()：
        urlize()：
        wordcount()：
        tojson()：
        truncate()：
    2.4 自定义过滤器：需要使用app.template_filter("转换器名称")，转换器名称需要和函数名保持一致。
3. 模板中的循环和控制语句
    3.1 所有的循环和控制语句必须在{% %}中，并且以{% endxxx %}进行结束。
    3.2 if语句的使用，请查看如下的代码。
    3.3 for语句的使用，特别注意的是如果for循环的时候没有值，可以增加{% else %}语句进行控制，请查看如下的代码。
    3.4 需要关注的是loop.index、loop.index0、koop.first、loop.last、loop.last的使用方法。