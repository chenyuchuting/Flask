1. 处理请求
    1.1 URL向视图函数传递参数
        传递参数的语法是/<参数名>/，同样这个“参数名”要与视图函数中的参数名保持一致。
        此外也可以使用“?key=value”的方式向视图函数传递。
        如果你的页面要做SEO优化（被搜索引擎搜索到），推荐使用第一种方式。
    1.2 路由匹配
        为了将不同的请求分发到对应的视图函数，程序的实例储存了一个路由表，这个路由表就定义了URL规则和视图函数的对应关系，如果没有找到对应的视图函数，则Flask自动返回404错误响应。
    1.3 转换器
        转换器规则：<转换器:变量名>。冒号为英文状态，中间不能有空格。Flask在解析URL请求时，会通过转换器将变量转换为对应的转换器数据类型。
        转换器分类：string，int，float，path，any，uuid。
        其中转换器any转换器的规则为：/<any(blog,article):url_path>/<id>/
    1.4 自定义转换器
        转换器其实是一个类，它继承自：from werkzeug.routing import BaseConverter。
        在自定义的转换器中。实现to_python(self, values)方法，这个方法返回的值，将会被传递到视图函数中作为参数。
        在自定义的转换器中。实现to_url(self, values)方法，这个方法的返回值，将会在调用url_for()函数时生成符合要求的URL形式。

2. Request对象
    2.1 这个请求对象封装了从客户端发来的请求报文，我们能从这个请求报文中获取想要的数据。
    2.2 request对象常用的方法和属性，这个可自行百度掌握，后续我这里也会逐步的说明，比如args，cookies，data，files、method等，具体的使用方法参照我如下的代码。
